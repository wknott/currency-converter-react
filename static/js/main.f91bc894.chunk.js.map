{"version":3,"sources":["Container/index.js","Header/index.js","Label/index.js","Select/index.js","Form/index.js","Result/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","children","className","Header","Label","labelText","Select","value","setValue","exchangeRatesTable","onChange","target","map","code","currency","key","Form","amount","setAmount","fromCurrency","setFromCurrency","toCurrency","setToCurrency","type","Result","filter","mid","toFixed","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sVASeA,G,MANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,0BAAMC,UAAU,aACbD,KCIUE,G,MANA,kBACb,4BAAQD,UAAU,UAChB,wBAAIA,UAAU,iBAAd,wBCOWE,G,YATD,SAAC,GAAD,IAAGH,EAAH,EAAGA,SAAUI,EAAb,EAAaA,UAAb,OACZ,2BACE,2BAAOH,UAAU,SACdG,EADH,IAEGJ,MCKQK,EAVA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,mBAApB,OACb,4BACEP,UAAU,eACVK,MAAOA,EACPG,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBH,EAASG,EAAOJ,SAEzCE,EAAmBG,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAT,OAAwB,4BAAQC,IAAKF,EAAMN,MAAOM,GAAOC,QCmBtEE,EAtBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,UAAWC,EAAtB,EAAsBA,aAAcC,EAApC,EAAoCA,gBAAiBC,EAArD,EAAqDA,WAAYC,EAAjE,EAAiEA,cAAeb,EAAhF,EAAgFA,mBAAhF,OACX,0BAAMP,UAAU,QACd,8BAAUA,UAAU,kBAClB,4BAAQA,UAAU,gBAAlB,eACA,kBAAC,EAAD,CAAOG,UAAU,mBACf,kBAAC,EAAD,CAAQE,MAAOY,EAAcX,SAAUY,EAAiBX,mBAAoBA,KAE9E,kBAAC,EAAD,CAAOJ,UAAU,SACf,2BACEH,UAAU,cACVqB,KAAK,SACLhB,MAAOU,EACPP,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBO,EAAUP,EAAOJ,WAG/C,kBAAC,EAAD,CAAOF,UAAU,gBACf,kBAAC,EAAD,CAAQE,MAAOc,EAAYb,SAAUc,EAAeb,mBAAoBA,QCVjEe,G,MARA,SAAC,GAAD,IAAGP,EAAH,EAAGA,OAAQE,EAAX,EAAWA,aAAcV,EAAzB,EAAyBA,mBAAoBY,EAA7C,EAA6CA,WAA7C,OACb,wBAAInB,UAAU,UACXe,EADH,IACYE,EADZ,OAEKF,EAASR,EAAmBgB,QAAO,qBAAGZ,OAAoBM,KAAc,GAAGO,IACxEjB,EAAmBgB,QAAO,qBAAGZ,OAAoBQ,KAAY,GAAGK,KAAKC,QAAQ,GAHrF,IAG0FN,KCkC7EO,MAnCf,WACE,IAAMnB,EAAqB,CACzB,CAAEI,KAAM,MAAOC,SAAU,aAASY,IAAK,GACvC,CAAEb,KAAM,MAAOC,SAAU,OAAQY,IAAK,MACtC,CAAEb,KAAM,MAAOC,SAAU,yBAAqBY,IAAK,MACnD,CAAEb,KAAM,MAAOC,SAAU,iBAAkBY,IAAK,MAChD,CAAEb,KAAM,MAAOC,SAAU,mBAAoBY,IAAK,OAClD,CAAEb,KAAM,MAAOC,SAAU,oBAAqBY,IAAK,MAPxC,EASeG,mBAAS,KATxB,mBASNZ,EATM,KASEC,EATF,OAU2BW,mBAASpB,EAAmB,GAAGI,MAV1D,mBAUNM,EAVM,KAUQC,EAVR,OAWuBS,mBAASpB,EAAmB,GAAGI,MAXtD,mBAWNQ,EAXM,KAWMC,EAXN,KAab,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEL,OAAQA,EACRC,UAAWA,EACXC,aAAcA,EACdC,gBAAiBA,EACjBC,WAAYA,EACZC,cAAeA,EACfb,mBAAoBA,IAEtB,kBAAC,EAAD,CACEQ,OAAQA,EACRE,aAAcA,EACdV,mBAAoBA,EACpBY,WAAYA,MCvBAS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f91bc894.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Container = ({ children }) => (\r\n  <main className=\"container\">\r\n    {children}\r\n  </main>\r\n)\r\n\r\nexport default Container;","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Header = () => (\r\n  <header className=\"header\">\r\n    <h1 className=\"header__title\">Przelicznik walut</h1>\r\n  </header>\r\n)\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Label = ({ children, labelText }) => (\r\n  <p>\r\n    <label className=\"label\">\r\n      {labelText}:\r\n      {children}\r\n    </label>\r\n  </p>\r\n)\r\n\r\nexport default Label;","import React from \"react\";\r\n\r\nconst Select = ({ value, setValue, exchangeRatesTable }) => (\r\n  <select\r\n    className=\"form__select\"\r\n    value={value}\r\n    onChange={({ target }) => setValue(target.value)}\r\n  >\r\n    {exchangeRatesTable.map(({ code, currency }) => <option key={code} value={code}>{currency}</option>)}\r\n  </select>\r\n)\r\n\r\nexport default Select","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport Label from \"../Label\";\r\nimport Select from \"../Select\";\r\n\r\nconst Form = ({ amount, setAmount, fromCurrency, setFromCurrency, toCurrency, setToCurrency, exchangeRatesTable }) => (\r\n  <form className=\"form\">\r\n    <fieldset className=\"form__fieldset\">\r\n      <legend className=\"form__legend\">Przelicznik</legend>\r\n      <Label labelText=\"Pierwsza waluta\">\r\n        <Select value={fromCurrency} setValue={setFromCurrency} exchangeRatesTable={exchangeRatesTable} />\r\n      </Label>\r\n      <Label labelText=\"Kwota\">\r\n        <input\r\n          className=\"form__field\"\r\n          type=\"number\"\r\n          value={amount}\r\n          onChange={({ target }) => setAmount(target.value)}\r\n        />\r\n      </Label>\r\n      <Label labelText=\"Druga waluta\">\r\n        <Select value={toCurrency} setValue={setToCurrency} exchangeRatesTable={exchangeRatesTable} />\r\n      </Label>\r\n    </fieldset>\r\n  </form>\r\n)\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Result = ({ amount, fromCurrency, exchangeRatesTable, toCurrency }) => (\r\n  <h2 className=\"result\">\r\n    {amount} {fromCurrency} = {\r\n      (amount * exchangeRatesTable.filter(({ code }) => code === fromCurrency)[0].mid\r\n        / exchangeRatesTable.filter(({ code }) => code === toCurrency)[0].mid).toFixed(2)} {toCurrency}\r\n  </h2>\r\n)\r\n\r\nexport default Result;","import React, { useState } from \"react\";\nimport Container from \"./Container\";\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\n\nfunction App() {\n  const exchangeRatesTable = [\n    { code: \"PLN\", currency: \"złoty\", mid: 1 },\n    { code: \"EUR\", currency: \"euro\", mid: 4.44 },\n    { code: \"USD\", currency: \"dolar amerykański\", mid: 3.85 },\n    { code: \"GBP\", currency: \"funt szterling\", mid: 4.84 },\n    { code: \"UAH\", currency: \"hrywna (Ukraina)\", mid: 0.1364 },\n    { code: \"CHF\", currency: \"frank szwajcarski\", mid: 4.10 }\n  ];\n  const [amount, setAmount] = useState(100);\n  const [fromCurrency, setFromCurrency] = useState(exchangeRatesTable[0].code);\n  const [toCurrency, setToCurrency] = useState(exchangeRatesTable[1].code);\n\n  return (\n    <Container>\n      <Header />\n      <Form\n        amount={amount}\n        setAmount={setAmount}\n        fromCurrency={fromCurrency}\n        setFromCurrency={setFromCurrency}\n        toCurrency={toCurrency}\n        setToCurrency={setToCurrency}\n        exchangeRatesTable={exchangeRatesTable}\n      />\n      <Result\n        amount={amount}\n        fromCurrency={fromCurrency}\n        exchangeRatesTable={exchangeRatesTable}\n        toCurrency={toCurrency}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}