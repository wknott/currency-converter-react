{"version":3,"sources":["App/background.png","App/Clock/styled.js","App/Clock/index.js","App/Clock/useCurrentDate.js","App/Container/styled.js","App/Container/index.js","App/Form/Label/styled.js","App/Form/Label/index.js","App/Form/Select/styled.js","App/Form/Select/index.js","App/Form/styled.js","App/Form/index.js","App/Header/styled.js","App/Header/index.js","App/Result/styled.js","App/Result/index.js","App/GlobalStyle.js","App/styled.js","App/theme.js","App/App.js","App/useRatesData.js","serviceWorker.js","index.js"],"names":["module","exports","StyledClock","styled","p","Clock","date","useState","Date","setDate","useEffect","intervalId","setInterval","clearInterval","useCurrentDate","toLocaleDateString","undefined","weekday","day","month","hour","minute","second","getDateString","ContainerMain","main","theme","colors","primary","background","breakpoints","mobile","Container","children","StyledLabel","label","Label","labelText","StyledSelect","select","Select","value","setValue","options","className","onChange","target","map","option","key","Fieldset","fieldset","Field","input","Form","amount","setAmount","fromCurrency","setFromCurrency","toCurrency","setToCurrency","rates","Object","keys","type","StyledHeader","header","Title","h1","Header","StyledResult","h2","Result","toFixed","GlobalStyle","createGlobalStyle","text","Paragraph","error","css","defaultTheme","App","loading","ratesData","setRatesData","setTimeout","a","axios","get","response","data","useRatesData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"8HAAAA,EAAOC,QAAU,IAA0B,wC,6PCEpC,IAAMC,EAAcC,IAAOC,EAAV,KCyBTC,EAVD,WACZ,IAAMC,EChBsB,WAAO,IAAD,EACVC,mBAAS,IAAIC,MADH,mBAC3BF,EAD2B,KACrBG,EADqB,KAalC,OAVAC,qBAAU,WACR,IAAMC,EAAaC,aAAY,WAC7BH,EAAQ,IAAID,QACX,KAEH,OAAO,WACLK,cAAcF,MAEf,IAEIL,EDGMQ,GAEb,OACE,kBAACZ,EAAD,qBAjBkB,SAACI,GAAD,OACpBA,EAAKS,wBAAmBC,EACtB,CACEC,QAAS,OACTC,IAAK,UACLC,MAAO,OACPC,KAAM,UACNC,OAAQ,UACRC,OAAQ,YAUMC,CAAcjB,K,4TEpB3B,IAAMkB,EAAgBrB,IAAOsB,KAAV,KAIJ,qBAAGC,MAAkBC,OAAOC,WAGtB,qBAAGF,MAAkBC,OAAOC,WAClC,qBAAGF,MAAkBC,OAAOE,cAE5B,qBAAGH,MAAkBI,YAAYC,UCHxCC,EANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,kBAACT,EAAD,KACGS,I,gPCHE,IAAMC,EAAc/B,IAAOgC,MAAV,KAMD,qBAAGT,MAAkBI,YAAYC,UCIzCK,EATD,SAAC,GAAD,IAAGH,EAAH,EAAGA,SAAUI,EAAb,EAAaA,UAAb,OACZ,2BACE,kBAACH,EAAD,KACGG,EADH,IAEGJ,K,0ICLA,IAAMK,EAAenC,IAAOoC,OAAV,KACH,qBAAGb,MAAkBC,OAAOC,WCUnCY,EAVA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,QAApB,OACb,kBAACL,EAAD,CACEM,UAAU,eACVH,MAAOA,EACPI,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBJ,EAASI,EAAOL,SAEzCE,EAAQI,KAAI,SAACC,GAAD,OAAY,4BAAQC,IAAKD,GAASA,Q,kOCP5C,IAAME,EAAW/C,IAAOgD,SAAV,KAIRC,EAAQjD,IAAOkD,MAAV,KACI,qBAAG3B,MAAkBC,OAAOC,WC6BnC0B,EA/BF,SAAC,GAA4F,IAA1FC,EAAyF,EAAzFA,OAAQC,EAAiF,EAAjFA,UAAWC,EAAsE,EAAtEA,aAAcC,EAAwD,EAAxDA,gBAAiBC,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,MAE3F,OACE,8BACE,kBAACX,EAAD,KACE,kBAAC,EAAD,CAAOb,UAAU,mBACf,kBAAC,EAAD,CACEI,MAAOgB,EACPf,SAAUgB,EACVf,QAASmB,OAAOC,KAAKF,MAGzB,kBAAC,EAAD,CAAOxB,UAAU,SACf,kBAACe,EAAD,CACEY,KAAK,SACLvB,MAAOc,EACPV,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBU,EAAUV,EAAOL,WAG/C,kBAAC,EAAD,CAAOJ,UAAU,gBACf,kBAAC,EAAD,CACEI,MAAOkB,EACPjB,SAAUkB,EACVjB,QAASmB,OAAOC,KAAKF,S,gOC1B1B,IAAMI,EAAe9D,IAAO+D,OAAV,KAKZC,EAAQhE,IAAOiE,GAAV,KCEHC,EANA,SAAC,GAAD,EAAG/D,KAAH,OACb,kBAAC2D,EAAD,KACE,kBAACE,EAAD,4B,4JCHG,IAAMG,EAAenE,IAAOoE,GAAV,KCeVC,EAdA,SAAC,GAAD,IAAGjB,EAAH,EAAGA,OAAQE,EAAX,EAAWA,aAAcE,EAAzB,EAAyBA,WAAYE,EAArC,EAAqCA,MAArC,OACb,kBAACS,EAAD,KACGf,EADH,OACiBE,EADjB,WAGOF,GAECM,EAAMF,GACNE,EAAMJ,KAERgB,QAAQ,GARd,OASUd,I,8bCVL,IAAMe,EAAcC,YAAH,IAcI9C,KAIf,qBAAGH,MAAkBC,OAAOiD,QAIlB,qBAAGlD,MAAkBI,YAAYC,U,8LCvBjD,IAAM8C,EAAY1E,IAAOC,EAAV,KAElB,qBAAG0E,OAAqBC,YAAJ,QCJXC,EAAe,CAC1BrD,OAAQ,CACNC,QAAS,UACTgD,KAAM,OACN/C,WAAY,QAEdC,YAAa,CACXC,OAAQ,M,yCCoDGkD,MA/Cf,WAAgB,IAAD,EACe1E,mBAAS,OADxB,mBACNgD,EADM,KACEC,EADF,OAE2BjD,mBAAS,OAFpC,mBAENkD,EAFM,KAEQC,EAFR,OAGuBnD,mBAAS,OAHhC,mBAGNoD,EAHM,KAGMC,EAHN,OCTa,WAAO,IAAD,EACErD,mBAChC,CACEsD,MAAO,GACPqB,SAAS,EACT5E,KAAM,KACNwE,MAAO,OANqB,mBACzBK,EADyB,KACdC,EADc,KAoChC,OA1BA1E,qBAAU,WAuBR2E,WAtBa,uCAAG,4BAAAC,EAAA,+EAEWC,IAAMC,IAAI,mDAFrB,OAENC,EAFM,OAGZL,EACE,CACEvB,MAAO4B,EAASC,KAAK7B,MACrBqB,SAAS,EACT5E,KAAMmF,EAASC,KAAKpF,KACpBwE,MAAO,OARC,gDAYZM,EACE,CACEvB,MAAO,GACPqB,SAAS,EACT5E,KAAM,KACNwE,OAAO,IAjBC,yDAAH,qDAsBO,OACnB,IAEIK,EDvBiCQ,GAAhC9B,EAJK,EAILA,MAAOqB,EAJF,EAIEA,QAAS5E,EAJX,EAIWA,KAAMwE,EAJjB,EAIiBA,MAE9B,OACE,kBAAC,IAAD,CAAepD,MAAOsD,GACpB,kBAAC,EAAD,KACE,kBAACN,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACCQ,EAEC,kBAACL,EAAD,kCAEAC,EAEE,kBAACD,EAAD,CAAWC,OAAO,GAAlB,qFAEA,oCACE,kBAAC,EAAD,CACEvB,OAAQA,EACRC,UAAWA,EACXC,aAAcA,EACdC,gBAAiBA,EACjBC,WAAYA,EACZC,cAAeA,EACfC,MAAOA,IAET,kBAACgB,EAAD,6FAEqB,gCAASvE,IAE9B,kBAAC,EAAD,CACEiD,OAAQA,EACRE,aAAcA,EACdE,WAAYA,EACZE,MAAOA,QEtCH+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,c","file":"static/js/main.6e7b91c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.d00ea2f2.png\";","import styled from \"styled-components\";\r\n\r\nexport const StyledClock = styled.p`\r\n  text-align: right;\r\n  font-family: monospace;\r\n`;","import React from \"react\";\r\nimport { StyledClock } from \"./styled\";\r\nimport { useCurrentDate } from \"./useCurrentDate\";\r\n\r\nconst getDateString = (date) => (\r\n  date.toLocaleDateString(undefined,\r\n    {\r\n      weekday: \"long\",\r\n      day: \"numeric\",\r\n      month: \"long\",\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n      second: \"numeric\"\r\n    }\r\n  )\r\n)\r\n\r\nconst Clock = () => {\r\n  const date = useCurrentDate();\r\n\r\n  return (\r\n    <StyledClock>\r\n      Dzisiaj jest {getDateString(date)}\r\n    </StyledClock>\r\n  )\r\n}\r\n\r\nexport default Clock;","import { useState, useEffect } from \"react\";\r\n\r\nexport const useCurrentDate = () => {\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setDate(new Date());\r\n    }, 1000)\r\n\r\n    return () => {\r\n      clearInterval(intervalId)\r\n    }\r\n  }, [])\r\n\r\n  return date;\r\n}","import styled from \"styled-components\";\r\n\r\nexport const ContainerMain = styled.main`\r\n  max-width: 750px;\r\n  margin: 0 auto;\r\n  margin-top: 100px;\r\n  border: 2px solid ${({ theme }) => theme.colors.primary};\r\n  border-radius: 25px;\r\n  padding: 0 20px;\r\n  box-shadow: 0 0 5px 2px ${({ theme }) => theme.colors.primary};\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n\r\n  @media(max-width: ${({ theme }) => theme.breakpoints.mobile}px){\r\n    margin: 10px;\r\n  }\r\n`;","import React from \"react\";\r\nimport { ContainerMain } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n  <ContainerMain>\r\n    {children}\r\n  </ContainerMain>\r\n)\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const StyledLabel = styled.label`\r\n  display: grid;\r\n  grid-template-columns: 1fr 3fr;\r\n  align-items: center;\r\n  grid-gap: 10px;\r\n  \r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`; ","import React from \"react\";\r\nimport { StyledLabel } from \"./styled\";\r\n\r\nconst Label = ({ children, labelText }) => (\r\n  <p>\r\n    <StyledLabel>\r\n      {labelText}:\r\n      {children}\r\n    </StyledLabel>\r\n  </p>\r\n)\r\n\r\nexport default Label;","import styled from \"styled-components\";\r\n\r\nexport const StyledSelect = styled.select`\r\n  border: 1px solid ${({ theme }) => theme.colors.primary};\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`;","import React from \"react\";\r\nimport { StyledSelect } from \"./styled\";\r\n\r\nconst Select = ({ value, setValue, options }) => (\r\n  <StyledSelect\r\n    className=\"form__select\"\r\n    value={value}\r\n    onChange={({ target }) => setValue(target.value)}\r\n  >\r\n    {options.map((option) => <option key={option}>{option}</option>)}\r\n  </StyledSelect>\r\n)\r\n\r\nexport default Select","import styled from \"styled-components\";\r\n\r\nexport const Fieldset = styled.fieldset`\r\n  border: none;\r\n`;\r\n\r\nexport const Field = styled.input`\r\n  border: 1px solid ${({ theme }) => theme.colors.primary};\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`;","import React from \"react\";\r\nimport Label from \"./Label\";\r\nimport Select from \"./Select\";\r\nimport { Fieldset, Field } from \"./styled\";\r\n\r\nconst Form = ({ amount, setAmount, fromCurrency, setFromCurrency, toCurrency, setToCurrency, rates }) => {\r\n\r\n  return (\r\n    <form>\r\n      <Fieldset>\r\n        <Label labelText=\"Pierwsza waluta\">\r\n          <Select\r\n            value={fromCurrency}\r\n            setValue={setFromCurrency}\r\n            options={Object.keys(rates)}\r\n          />\r\n        </Label>\r\n        <Label labelText=\"Kwota\">\r\n          <Field\r\n            type=\"number\"\r\n            value={amount}\r\n            onChange={({ target }) => setAmount(target.value)}\r\n          />\r\n        </Label>\r\n        <Label labelText=\"Druga waluta\">\r\n          <Select\r\n            value={toCurrency}\r\n            setValue={setToCurrency}\r\n            options={Object.keys(rates)}\r\n          />\r\n        </Label>\r\n      </Fieldset>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n  padding: 10px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 30px;\r\n  margin-bottom: 0;\r\n`;","import React from \"react\";\r\nimport { StyledHeader, Title } from \"./styled\";\r\n\r\nconst Header = ({ date }) => (\r\n  <StyledHeader>\r\n    <Title>Przelicznik walut</Title>\r\n  </StyledHeader>\r\n)\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledResult = styled.h2`\r\n  text-align: center;\r\n  padding: 20px 0 0 0;\r\n  font-size: 35px;\r\n  margin-top: 0;\r\n`;","import React from \"react\";\r\nimport { StyledResult } from \"./styled\";\r\n\r\nconst Result = ({ amount, fromCurrency, toCurrency, rates }) => (\r\n  <StyledResult>\r\n    {amount}&nbsp;{fromCurrency}&nbsp;= {\r\n      (\r\n        +amount *\r\n        (\r\n          rates[toCurrency] /\r\n          rates[fromCurrency]\r\n        )\r\n      ).toFixed(2)\r\n    }&nbsp;{toCurrency}\r\n  </StyledResult>\r\n)\r\n\r\nexport default Result;","import { createGlobalStyle } from \"styled-components\";\r\nimport background from \"./background.png\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *,\r\n  ::after,\r\n  ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-image: url(${background});\r\n  }\r\n\r\n  #root {\r\n    color: ${({ theme }) => theme.colors.text};\r\n    font-family: \"Lato\", sans-serif;\r\n  }\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n    padding: 20px 10px;\r\n  }\r\n`;","import styled, { css } from \"styled-components\";\r\n\r\nexport const Paragraph = styled.p`\r\n  text-align: center;\r\n  ${({ error }) => error && css`\r\n    color: red;\r\n `}\r\n`;","export const defaultTheme = {\r\n  colors: {\r\n    primary: \"#0234d2\",\r\n    text: \"#222\",\r\n    background: \"#eee\"\r\n  },\r\n  breakpoints: {\r\n    mobile: 767\r\n  },\r\n};","import React, { useState } from \"react\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport Clock from \"./Clock\";\r\nimport Container from \"./Container\";\r\nimport Form from \"./Form\";\r\nimport Header from \"./Header\";\r\nimport Result from \"./Result\";\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\nimport { Paragraph } from \"./styled\";\r\nimport { defaultTheme } from \"./theme\";\r\nimport { useRatesData } from \"./useRatesData\";\r\n\r\nfunction App() {\r\n  const [amount, setAmount] = useState(\"100\");\r\n  const [fromCurrency, setFromCurrency] = useState(\"USD\");\r\n  const [toCurrency, setToCurrency] = useState(\"PLN\");\r\n  const { rates, loading, date, error } = useRatesData();\r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container>\r\n        <GlobalStyle />\r\n        <Clock />\r\n        <Header />\r\n        {loading\r\n          ?\r\n          <Paragraph>Trwa wczytywanie walut...</Paragraph>\r\n          :\r\n          error\r\n            ?\r\n            <Paragraph error={true}>Wystąpił błąd, proszę spróbować później.</Paragraph>\r\n            :\r\n            <>\r\n              <Form\r\n                amount={amount}\r\n                setAmount={setAmount}\r\n                fromCurrency={fromCurrency}\r\n                setFromCurrency={setFromCurrency}\r\n                toCurrency={toCurrency}\r\n                setToCurrency={setToCurrency}\r\n                rates={rates}\r\n              />\r\n              <Paragraph>\r\n                Kursy walut pochodzą z Europejskiego Banku Centralnego.\r\n                Aktualne na dzień: <strong>{date}</strong>\r\n              </Paragraph>\r\n              <Result\r\n                amount={amount}\r\n                fromCurrency={fromCurrency}\r\n                toCurrency={toCurrency}\r\n                rates={rates}\r\n              />\r\n            </>\r\n        }\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const useRatesData = () => {\r\n  const [ratesData, setRatesData] = useState(\r\n    {\r\n      rates: [],\r\n      loading: true,\r\n      date: null,\r\n      error: null,\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        const response = await axios.get(\"https://api.exchangeratesapi.io/latest?base=PLN\");\r\n        setRatesData(\r\n          {\r\n            rates: response.data.rates,\r\n            loading: false,\r\n            date: response.data.date,\r\n            error: null,\r\n          }\r\n        );\r\n      } catch (error) {\r\n        setRatesData(\r\n          {\r\n            rates: [],\r\n            loading: false,\r\n            date: null,\r\n            error: true,\r\n          }\r\n        );\r\n      }\r\n    }\r\n    setTimeout(getData, 1000);\r\n  }, []);\r\n\r\n  return ratesData;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}