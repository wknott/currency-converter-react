{"version":3,"sources":["Container/styled.js","Container/index.js","Header/styled.js","Header/index.js","Label/styled.js","Label/index.js","Select/styled.js","Select/index.js","rates.js","Form/styled.js","Form/index.js","Result/styled.js","Result/index.js","Clock/styled.js","Clock/index.js","Clock/useCurrentDate.js","App.js","serviceWorker.js","index.js"],"names":["ContainerMain","styled","main","Container","children","StyledHeader","header","Title","h1","Header","date","StyledLabel","label","Label","labelText","StyledSelect","select","Select","value","setValue","options","className","onChange","target","map","key","rates","code","currency","mid","Fieldset","fieldset","Field","input","ratesToOptions","Form","amount","setAmount","fromCurrency","setFromCurrency","toCurrency","setToCurrency","type","StyledResult","h2","Result","find","toFixed","StyledClock","p","Clock","useState","Date","setDate","useEffect","intervalId","setInterval","clearInterval","useCurrentDate","toLocaleDateString","undefined","weekday","day","month","hour","minute","second","getDateString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.839e5772.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const ContainerMain = styled.main`\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  margin-top: 100px;\r\n  border: 2px solid hsl(226, 98%, 42%);\r\n  border-radius: 25px;\r\n  padding: 0 20px;\r\n  box-shadow: 0 0 5px 2px hsl(226, 98%, 52%);\r\n  background-color: #eee;\r\n\r\n  @media(max-width: 767px){\r\n    margin-top: 0;\r\n  }\r\n`;","import React from \"react\";\r\nimport { ContainerMain } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n  <ContainerMain>\r\n    {children}\r\n  </ContainerMain>\r\n)\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n  padding: 10px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 30px;\r\n  margin-bottom: 0;\r\n`;","import React from \"react\";\r\nimport { StyledHeader, Title } from \"./styled\";\r\n\r\nconst Header = ({ date }) => (\r\n  <StyledHeader>\r\n    <Title>Przelicznik walut</Title>\r\n  </StyledHeader>\r\n)\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledLabel = styled.label`\r\n  display: grid;\r\n  grid-template-columns: 1fr 3fr;\r\n  align-items: center;\r\n  grid-gap: 10px;\r\n  \r\n  @media (max-width: 600px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`; ","import React from \"react\";\r\nimport { StyledLabel } from \"./styled\";\r\n\r\nconst Label = ({ children, labelText }) => (\r\n  <p>\r\n    <StyledLabel>\r\n      {labelText}:\r\n      {children}\r\n    </StyledLabel>\r\n  </p>\r\n)\r\n\r\nexport default Label;","import styled from \"styled-components\";\r\n\r\nexport const StyledSelect = styled.select`\r\n  border: 1px solid #0234d2;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`;","import React from \"react\";\r\nimport { StyledSelect } from \"./styled\";\r\nconst Select = ({ value, setValue, options }) => (\r\n  <StyledSelect\r\n    className=\"form__select\"\r\n    value={value}\r\n    onChange={({ target }) => setValue(target.value)}\r\n  >\r\n    {options.map(({ value, label }) => <option key={value} value={value}>{label}</option>)}\r\n  </StyledSelect>\r\n)\r\n\r\nexport default Select","export const rates = [\r\n  { code: \"PLN\", currency: \"złoty\", mid: 1 },\r\n  { code: \"EUR\", currency: \"euro\", mid: 4.44 },\r\n  { code: \"USD\", currency: \"dolar amerykański\", mid: 3.85 },\r\n  { code: \"GBP\", currency: \"funt szterling\", mid: 4.84 },\r\n  { code: \"UAH\", currency: \"hrywna (Ukraina)\", mid: 0.1364 },\r\n  { code: \"CHF\", currency: \"frank szwajcarski\", mid: 4.10 }\r\n];","import styled from \"styled-components\";\r\n\r\nexport const Fieldset = styled.fieldset`\r\n  border: none;\r\n`;\r\n\r\nexport const Field = styled.input`\r\n  border: 1px solid #0234d2;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`;","import React from \"react\";\r\nimport Label from \"../Label\";\r\nimport Select from \"../Select\";\r\nimport { rates } from \"../rates\";\r\nimport { Fieldset, Field } from \"./styled\";\r\n\r\nconst ratesToOptions = () => (\r\n  rates.map(({ code, currency }) => ({\r\n    value: code,\r\n    label: currency,\r\n  }))\r\n)\r\n\r\nconst Form = ({ amount, setAmount, fromCurrency, setFromCurrency, toCurrency, setToCurrency }) => (\r\n  <form>\r\n    <Fieldset>\r\n      <Label labelText=\"Pierwsza waluta\">\r\n        <Select\r\n          value={fromCurrency}\r\n          setValue={setFromCurrency}\r\n          options={ratesToOptions()}\r\n        />\r\n      </Label>\r\n      <Label labelText=\"Kwota\">\r\n        <Field\r\n          type=\"number\"\r\n          value={amount}\r\n          onChange={({ target }) => setAmount(target.value)}\r\n        />\r\n      </Label>\r\n      <Label labelText=\"Druga waluta\">\r\n        <Select\r\n          value={toCurrency}\r\n          setValue={setToCurrency}\r\n          options={ratesToOptions()}\r\n        />\r\n      </Label>\r\n    </Fieldset>\r\n  </form>\r\n)\r\n\r\nexport default Form;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledResult = styled.h2`\r\n  text-align: center;\r\n  padding: 20px 0 0 0;\r\n  font-size: 35px;\r\n  margin-top: 0;\r\n`;","import React from \"react\";\r\nimport { StyledResult } from \"./styled\";\r\nimport { rates } from \"../rates\";\r\n\r\nconst Result = ({ amount, fromCurrency, toCurrency }) => (\r\n  <StyledResult>\r\n    {amount}&nbsp;{fromCurrency}&nbsp;= {\r\n      (\r\n        +amount *\r\n        (\r\n          rates.find(({ code }) => code === fromCurrency).mid /\r\n          rates.find(({ code }) => code === toCurrency).mid\r\n        )\r\n      ).toFixed(2)\r\n    }&nbsp;{toCurrency}\r\n  </StyledResult>\r\n)\r\n\r\nexport default Result;","import styled from \"styled-components\";\r\n\r\nexport const StyledClock = styled.p`\r\n  text-align: right;\r\n  font-family: monospace;\r\n`;","import React from \"react\";\r\nimport { StyledClock } from \"./styled\";\r\nimport { useCurrentDate } from \"./useCurrentDate\";\r\n\r\nconst getDateString = (date) => (\r\n  date.toLocaleDateString(undefined,\r\n    {\r\n      weekday: \"long\",\r\n      day: \"numeric\",\r\n      month: \"long\",\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n      second: \"numeric\"\r\n    }\r\n  )\r\n)\r\n\r\nconst Clock = () => {\r\n  const date = useCurrentDate();\r\n\r\n  return (\r\n    <StyledClock>\r\n      Dzisiaj jest {getDateString(date)}\r\n    </StyledClock>\r\n  )\r\n}\r\n\r\nexport default Clock;","import { useState, useEffect } from \"react\";\r\n\r\nexport const useCurrentDate = () => {\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setDate(new Date());\r\n    }, 1000)\r\n\r\n    return () => {\r\n      clearInterval(intervalId)\r\n    }\r\n  }, [])\r\n\r\n  return date;\r\n}","import React, { useState } from \"react\";\r\nimport Container from \"./Container\";\r\nimport Header from \"./Header\";\r\nimport Form from \"./Form\";\r\nimport Result from \"./Result\";\r\nimport { rates } from \"./rates\";\r\nimport Clock from \"./Clock/\";\r\nfunction App() {\r\n  const [amount, setAmount] = useState(\"100\");\r\n  const [fromCurrency, setFromCurrency] = useState(rates[0].code);\r\n  const [toCurrency, setToCurrency] = useState(rates[1].code);\r\n\r\n  return (\r\n    <Container>\r\n      <Clock />\r\n      <Header />\r\n      <Form\r\n        amount={amount}\r\n        setAmount={setAmount}\r\n        fromCurrency={fromCurrency}\r\n        setFromCurrency={setFromCurrency}\r\n        toCurrency={toCurrency}\r\n        setToCurrency={setToCurrency}\r\n      />\r\n      <Result\r\n        amount={amount}\r\n        fromCurrency={fromCurrency}\r\n        toCurrency={toCurrency}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}